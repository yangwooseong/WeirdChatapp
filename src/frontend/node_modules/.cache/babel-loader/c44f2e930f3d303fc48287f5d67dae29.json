{"ast":null,"code":"var _jsxFileName = \"/Users/yang-useong/ReactApp/chats/src/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { CTX } from './Store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: '50px',\n    padding: theme.spacing(3, 2)\n  },\n  flex: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  topicWindow: {\n    width: '30%',\n    height: '300px',\n    borderRight: '1px solid grey'\n  },\n  chatWindow: {\n    width: '70%',\n    height: '300px'\n  },\n  chatBox: {\n    width: '85%'\n  },\n  button: {\n    width: '15%'\n  }\n}));\nexport default function Dashboard() {\n  _s();\n\n  const classes = useStyles();\n  const [text, setText] = useState('');\n  const {\n    allChats,\n    sendChatAction,\n    user\n  } = useContext(CTX);\n  const topics = Object.keys(allChats);\n  const [activeTopic, setActiveTopic] = useState(topics[0]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        component: \"h3\",\n        children: \"Chat App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        component: \"h4\",\n        children: activeTopic\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.flex,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.topicWindow,\n          children: /*#__PURE__*/_jsxDEV(List, {\n            children: topics.map(topic => /*#__PURE__*/_jsxDEV(ListItem, {\n              onClick: e => setActiveTopic(e.target.innerText),\n              button: true,\n              children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                primary: topic\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 33\n              }, this)\n            }, topic, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 29\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.chatWindow,\n          children: allChats[activeTopic].map((chat, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.flex,\n            children: [/*#__PURE__*/_jsxDEV(Chip, {\n              className: classes.chip,\n              label: chat.from\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              children: chat.msg\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 29\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.flex,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Standard\",\n          className: classes.chatBox,\n          value: text,\n          onChange: e => setText(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          className: classes.button,\n          onClick: () => {\n            sendChatAction({\n              from: user,\n              msg: text,\n              topic: activeTopic\n            });\n            setText('');\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"00B7EeBLNo4YSjRrqWlMHEazo1s=\", false, function () {\n  return [useStyles];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/yang-useong/ReactApp/chats/src/Dashboard.js"],"names":["React","useContext","useState","makeStyles","Paper","Typography","List","ListItem","ListItemText","Chip","Button","TextField","CTX","useStyles","theme","root","margin","padding","spacing","flex","display","alignItems","topicWindow","width","height","borderRight","chatWindow","chatBox","button","Dashboard","classes","text","setText","allChats","sendChatAction","user","topics","Object","keys","activeTopic","setActiveTopic","map","topic","e","target","innerText","chat","i","chip","from","msg","value"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography'\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nimport {CTX} from './Store'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: '50px',\n        padding: theme.spacing(3, 2),\n    },\n    flex: {\n        display: 'flex',\n        alignItems: 'center'\n    },\n    topicWindow: {\n        width: '30%',\n        height: '300px',\n        borderRight: '1px solid grey'\n    },\n    chatWindow: {\n        width: '70%',\n        height: '300px'\n    },\n    chatBox: {\n        width: '85%'\n    },\n    button: {\n        width: '15%'\n    }\n}));\n\nexport default function Dashboard() {\n\n    const classes = useStyles();\n\n    const [text, setText] = useState('')\n    const {allChats, sendChatAction, user} = useContext(CTX)\n    const topics = Object.keys(allChats)\n\n    const [activeTopic, setActiveTopic] = useState(topics[0])\n \n    return (\n    <div>\n      <Paper className={classes.root}>\n        <Typography variant='h5' component='h3'>\n            Chat App\n        </Typography>\n        <Typography component='h4'>\n            {activeTopic}\n        </Typography>\n        <div className={classes.flex}>\n            <div className={classes.topicWindow}>\n                <List>\n                    {\n                        topics.map(topic => (\n                            <ListItem onClick={e => setActiveTopic(e.target.innerText)} key={topic} button>\n                                <ListItemText primary={topic} />\n                            </ListItem>\n                        ))\n                    }\n                </List>\n            </div>\n            <div className={classes.chatWindow}>\n                    {\n                    allChats[activeTopic].map((chat, i) => (\n                        <div className={classes.flex} key={i}>\n                            <Chip className={classes.chip} label={chat.from}/>\n                            <Typography variant='body1'>{chat.msg}</Typography>\n                        </div>\n                    ))\n                    }\n            </div>\n        </div>\n            <div className={classes.flex}>\n                <TextField \n                    label=\"Standard\" \n                    className={classes.chatBox}\n                    value={text}\n                    onChange={e => setText(e.target.value)}\n                />\n                <Button \n                    variant=\"contained\"  \n                    color=\"primary\"\n                    className={classes.button}\n                    onClick={() => {\n                        sendChatAction({from: user, msg:text, topic:activeTopic})\n                        setText('')\n                    }}\n                >\n                    Send\n                </Button>\n            </div>\n      </Paper>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}